# Generated by Django 5.2.3 on 2025-07-09 15:20

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.functions.comparison
import django.db.models.functions.text
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Match',
            fields=[
                ('match_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('match_seq_num', models.PositiveBigIntegerField(blank=True, db_comment='A sequence number for tracking new matches from the API.', db_index=True, null=True)),
                ('start_time', models.PositiveIntegerField(db_comment='Epoch timestamp of when the match began.', db_index=True)),
                ('duration', models.PositiveIntegerField(help_text='Match duration in seconds.')),
                ('winner', models.PositiveSmallIntegerField(choices=[(0, 'Dire'), (1, 'Radiant'), (2, 'Unknown / In Progress')], db_comment='0=Dire, 1=Radiant, 2=Unknown.', db_index=True, default=2)),
                ('radiant_score', models.PositiveSmallIntegerField(default=0)),
                ('dire_score', models.PositiveSmallIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Match',
                'verbose_name_plural': 'Matches',
                'db_table': 'matches',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='PickBan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_pick', models.BooleanField(help_text='True for a pick, False for a ban.')),
                ('team', models.PositiveSmallIntegerField(choices=[(0, 'Radiant'), (1, 'Dire')], help_text='The team that made the pick/ban (0=Radiant, 1=Dire).')),
                ('order', models.PositiveSmallIntegerField(help_text='The sequence of the pick/ban in the draft, starting from 0.', validators=[django.core.validators.MaxValueValidator(23)])),
            ],
            options={
                'db_table': 'picks_bans',
                'ordering': ['match', 'order'],
            },
        ),
        migrations.CreateModel(
            name='PlayerMatch',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('player_slot', models.PositiveSmallIntegerField(db_index=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(132)])),
                ('is_radiant', models.GeneratedField(db_persist=True, expression=models.Q(('player_slot__lt', 5)), output_field=models.BooleanField())),
                ('kills', models.PositiveSmallIntegerField(default=0)),
                ('deaths', models.PositiveSmallIntegerField(default=0)),
                ('assists', models.PositiveSmallIntegerField(default=0)),
                ('last_hits', models.PositiveSmallIntegerField(default=0)),
                ('denies', models.PositiveSmallIntegerField(default=0)),
                ('gold_per_min', models.PositiveSmallIntegerField(default=0)),
                ('xp_per_min', models.PositiveSmallIntegerField(default=0)),
                ('level', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('net_worth', models.PositiveIntegerField(default=0)),
                ('items', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, default=list, size=6)),
                ('backpack', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, default=list, size=3)),
                ('item_neutral', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'player_matches',
                'ordering': ['match', 'player_slot'],
            },
        ),
        migrations.CreateModel(
            name='PublicMatch',
            fields=[
                ('match_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('match_seq_num', models.PositiveBigIntegerField(blank=True, db_index=True, null=True)),
                ('start_time', models.PositiveIntegerField(db_index=True, help_text='Epoch timestamp of match start.')),
                ('duration', models.PositiveIntegerField(help_text='Duration in seconds.', validators=[django.core.validators.MinValueValidator(0)])),
                ('radiant_win', models.BooleanField()),
                ('lobby_type', models.PositiveSmallIntegerField(choices=[(-1, 'Invalid'), (0, 'Unranked Matchmaking'), (1, 'Practice'), (2, 'Tournament'), (3, 'Tutorial'), (4, 'Co-op with Bots'), (5, 'Team Match'), (6, 'Solo Queue'), (7, 'Ranked Matchmaking'), (8, '1v1 Solo Mid'), (9, 'Battle Cup'), (10, 'Local Bots Match'), (11, 'Spectator'), (12, 'Event Game'), (13, 'Gauntlet'), (14, 'New Player Pool'), (15, 'Featured Hero')], db_index=True)),
                ('game_mode', models.PositiveSmallIntegerField(choices=[(0, 'Unknown'), (1, 'All Pick'), (2, 'Captains Mode'), (3, 'Random Draft'), (4, 'Single Draft'), (5, 'All Random'), (6, 'Intro'), (7, 'Diretide'), (8, 'Reverse Captains Mode'), (9, 'The Greeviling'), (10, 'Tutorial'), (11, 'Mid Only'), (12, 'Least Played'), (13, 'Limited Hero Pool'), (14, 'Compendium'), (15, 'Custom'), (16, 'Captains Draft'), (17, 'Balanced Draft'), (18, 'Ability Draft'), (19, 'Event'), (20, 'All Random Deathmatch'), (21, '1v1 Solo Mid'), (22, 'Ranked All Pick'), (23, 'Turbo'), (24, 'Mutation'), (25, 'Coaches Challenge')], db_index=True)),
                ('avg_rank_tier', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('num_rank_tier', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('radiant_team', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), size=5)),
                ('dire_team', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), size=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'public_matches',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='MatchPatch',
            fields=[
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='patch_info', serialize=False, to='matches.match')),
                ('patch', models.CharField(db_index=True, help_text="The full patch string, e.g., '7.35c'.", max_length=20)),
                ('patch_major', models.GeneratedField(db_comment="Major version (e.g., 7 from '7.35c').", db_persist=True, expression=django.db.models.functions.comparison.Cast(django.db.models.functions.text.Substr('patch', 1, django.db.models.expressions.CombinedExpression(django.db.models.functions.text.StrIndex('patch', models.Value('.')), '-', models.Value(1))), output_field=models.IntegerField()), output_field=models.PositiveIntegerField())),
                ('patch_minor', models.GeneratedField(db_comment="Minor version (e.g., 35 from '7.35c').", db_persist=True, expression=django.db.models.functions.comparison.Cast(django.db.models.functions.text.Substr('patch', django.db.models.expressions.CombinedExpression(django.db.models.functions.text.StrIndex('patch', models.Value('.')), '+', models.Value(1)), 2), output_field=models.IntegerField()), output_field=models.PositiveIntegerField())),
            ],
            options={
                'verbose_name': 'Match Patch',
                'verbose_name_plural': 'Match Patches',
                'db_table': 'match_patch',
            },
        ),
        migrations.CreateModel(
            name='MatchStats',
            fields=[
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='stats', serialize=False, to='matches.match')),
                ('tower_status_radiant', models.PositiveIntegerField()),
                ('tower_status_dire', models.PositiveIntegerField()),
                ('barracks_status_radiant', models.PositiveIntegerField()),
                ('barracks_status_dire', models.PositiveIntegerField()),
                ('first_blood_time', models.PositiveIntegerField()),
                ('game_mode', models.PositiveSmallIntegerField(choices=[(0, 'Unknown'), (1, 'All Pick'), (2, 'Captains Mode'), (3, 'Random Draft'), (4, 'Single Draft'), (5, 'All Random'), (6, 'Intro'), (7, 'Diretide'), (8, 'Reverse Captains Mode'), (9, 'The Greeviling'), (10, 'Tutorial'), (11, 'Mid Only'), (12, 'Least Played'), (13, 'Limited Hero Pool'), (14, 'Compendium'), (15, 'Custom'), (16, 'Captains Draft'), (17, 'Balanced Draft'), (18, 'Ability Draft'), (19, 'Event'), (20, 'All Random Deathmatch'), (21, '1v1 Solo Mid'), (22, 'Ranked All Pick'), (23, 'Turbo'), (24, 'Mutation'), (25, 'Coaches Challenge')])),
                ('lobby_type', models.PositiveSmallIntegerField(choices=[(-1, 'Invalid'), (0, 'Unranked Matchmaking'), (1, 'Practice'), (2, 'Tournament'), (3, 'Tutorial'), (4, 'Co-op with Bots'), (5, 'Team Match'), (6, 'Solo Queue'), (7, 'Ranked Matchmaking'), (8, '1v1 Solo Mid'), (9, 'Battle Cup'), (10, 'Local Bots Match'), (11, 'Spectator'), (12, 'Event Game'), (13, 'Gauntlet'), (14, 'New Player Pool'), (15, 'Featured Hero')])),
                ('human_players', models.PositiveSmallIntegerField(default=10)),
                ('radiant_gold_adv', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, null=True, size=None)),
                ('radiant_xp_adv', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, null=True, size=None)),
                ('objectives', models.JSONField(blank=True, null=True)),
                ('chat', models.JSONField(blank=True, help_text='A list of chat events from the match.', null=True)),
                ('teamfights', models.JSONField(blank=True, null=True)),
                ('cosmetics', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Match Stats',
                'verbose_name_plural': 'Match Stats',
                'db_table': 'match_stats',
            },
        ),
        migrations.CreateModel(
            name='ParsedMatch',
            fields=[
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='parse_info', serialize=False, to='matches.match')),
                ('parse_status', models.CharField(choices=[('pending', 'Pending'), ('parsing', 'Parsing'), ('completed', 'Completed'), ('failed', 'Failed'), ('archived', 'Archived')], db_index=True, default='pending', max_length=20)),
                ('version', models.PositiveIntegerField(blank=True, help_text='The version of the parser used.', null=True)),
                ('error_message', models.TextField(blank=True, default='', help_text='Stores any error message if parsing failed.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Parsed Match Status',
                'verbose_name_plural': 'Parsed Match Statuses',
                'db_table': 'parsed_matches',
                'ordering': ['-match__start_time'],
            },
        ),
    ]
