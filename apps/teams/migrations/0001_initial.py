# Generated by Django 5.2.3 on 2025-07-09 15:20

import django.db.models.deletion
import django.db.models.expressions
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('matches', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_index=True, max_length=255)),
                ('tag', models.CharField(blank=True, db_index=True, max_length=64)),
                ('logo_url', models.URLField(blank=True, max_length=500)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether the team is considered active.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'team',
                'verbose_name_plural': 'teams',
                'db_table': 'teams',
                'ordering': ['-team_id'],
            },
        ),
        migrations.CreateModel(
            name='TeamMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('radiant', models.BooleanField(help_text='True if the team was on the Radiant side, False for Dire.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'team match',
                'verbose_name_plural': 'team matches',
                'db_table': 'team_match',
                'ordering': ['-match_id'],
            },
        ),
        migrations.CreateModel(
            name='TeamScenario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scenario', models.CharField(db_index=True, help_text='A unique string identifying the scenario.', max_length=255)),
                ('is_radiant', models.BooleanField(blank=True, db_index=True, help_text='Side played in this scenario, if applicable.', null=True)),
                ('region', models.SmallIntegerField(blank=True, db_index=True, null=True)),
                ('epoch_week', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True)),
                ('games', models.PositiveBigIntegerField(db_index=True, default=1)),
                ('wins', models.PositiveBigIntegerField(db_index=True, default=0)),
                ('losses', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(models.F('games'), '-', models.F('wins')), output_field=models.PositiveBigIntegerField())),
                ('win_rate', models.GeneratedField(db_persist=True, expression=models.Case(models.When(games__gt=0, then=django.db.models.expressions.CombinedExpression(django.db.models.expressions.CombinedExpression(models.F('wins'), '*', models.Value(100.0)), '/', models.F('games'))), default=models.Value(0.0)), output_field=models.DecimalField(decimal_places=2, max_digits=5))),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Team Scenario',
                'verbose_name_plural': 'Team Scenarios',
                'db_table': 'team_scenarios',
            },
        ),
        migrations.CreateModel(
            name='TeamRating',
            fields=[
                ('team', models.OneToOneField(db_column='team_id', help_text='The team this rating belongs to.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='rating', serialize=False, to='teams.team')),
                ('rating', models.PositiveIntegerField(blank=True, db_index=True, help_text="The team's rating, stored as an integer (e.g., 1234.56 is stored as 123456).", null=True)),
                ('wins', models.PositiveIntegerField(db_index=True, default=0)),
                ('losses', models.PositiveIntegerField(db_index=True, default=0)),
                ('last_match_time', models.BigIntegerField(blank=True, db_index=True, help_text='Epoch timestamp of the last match played.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Team Rating',
                'verbose_name_plural': 'Team Ratings',
                'db_table': 'team_rating',
            },
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['name'], name='teams_name_12b53a_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['tag'], name='teams_tag_b4ecd5_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['is_active', '-team_id'], name='teams_is_acti_d7a6ce_idx'),
        ),
        migrations.AddField(
            model_name='teammatch',
            name='match',
            field=models.ForeignKey(db_column='match_id', on_delete=django.db.models.deletion.CASCADE, related_name='team_match_entries', to='matches.match'),
        ),
        migrations.AddField(
            model_name='teammatch',
            name='team',
            field=models.ForeignKey(db_column='team_id', on_delete=django.db.models.deletion.PROTECT, related_name='team_matches', to='teams.team'),
        ),
        migrations.AddIndex(
            model_name='teamscenario',
            index=models.Index(fields=['scenario', 'region'], name='team_scenar_scenari_112727_idx'),
        ),
        migrations.AddIndex(
            model_name='teamscenario',
            index=models.Index(fields=['-win_rate'], name='ts_win_rate_idx'),
        ),
        migrations.AddConstraint(
            model_name='teamscenario',
            constraint=models.UniqueConstraint(fields=('scenario', 'is_radiant', 'region', 'epoch_week'), name='team_scenario_unique'),
        ),
        migrations.AddConstraint(
            model_name='teamscenario',
            constraint=models.CheckConstraint(condition=models.Q(('games__gte', 1)), name='scn_games_positive'),
        ),
        migrations.AddConstraint(
            model_name='teamscenario',
            constraint=models.CheckConstraint(condition=models.Q(('wins__lte', models.F('games'))), name='scn_wins_not_exceed_games'),
        ),
        migrations.AddIndex(
            model_name='teammatch',
            index=models.Index(fields=['team', '-match_id'], name='team_match_team_recent_idx'),
        ),
        migrations.AddConstraint(
            model_name='teammatch',
            constraint=models.UniqueConstraint(fields=('team', 'match_id'), name='team_match_uniq'),
        ),
    ]
