# Generated by Django 5.2.3 on 2025-07-09 15:20

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('teams', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('account_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('steamid', models.CharField(blank=True, max_length=32, null=True)),
                ('avatar', models.URLField(blank=True, max_length=255, null=True)),
                ('avatarmedium', models.URLField(blank=True, max_length=255, null=True)),
                ('avatarfull', models.URLField(blank=True, max_length=255, null=True)),
                ('profileurl', models.URLField(blank=True, max_length=255, null=True)),
                ('personaname', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('plus', models.BooleanField(default=False, help_text='Whether the player has a Dota Plus subscription.')),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('full_history_time', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('cheese', models.PositiveIntegerField(db_index=True, default=0, help_text='A legacy field from the OpenDota API.')),
                ('fh_unavailable', models.BooleanField(blank=True, help_text='Indicates if full match history is unavailable.', null=True)),
                ('loccountrycode', models.CharField(blank=True, max_length=2, null=True)),
                ('last_match_time', models.DateTimeField(blank=True, db_index=True, null=True)),
            ],
            options={
                'verbose_name': 'Player',
                'verbose_name_plural': 'Players',
                'db_table': 'players',
                'ordering': ['-last_match_time'],
            },
        ),
        migrations.CreateModel(
            name='PlayerMatchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_id', models.BigIntegerField()),
                ('player_slot', models.SmallIntegerField(blank=True, null=True)),
                ('retries', models.PositiveSmallIntegerField(db_index=True, default=0, help_text='Counter for processing retries, if any.')),
            ],
            options={
                'verbose_name': 'Player Match History',
                'verbose_name_plural': 'Player Match Histories',
                'db_table': 'player_match_history',
            },
        ),
        migrations.CreateModel(
            name='PlayerRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_id', models.BigIntegerField(blank=True, null=True)),
                ('solo_competitive_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('competitive_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('time', models.DateTimeField(db_index=True)),
            ],
            options={
                'verbose_name': 'Player Rating',
                'verbose_name_plural': 'Player Ratings',
                'db_table': 'player_ratings',
                'ordering': ['-time'],
            },
        ),
        migrations.CreateModel(
            name='CompetitiveRank',
            fields=[
                ('player', models.OneToOneField(db_column='account_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='competitive_rank', serialize=False, to='players.player')),
                ('rating', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Competitive Rank',
                'verbose_name_plural': 'Competitive Ranks',
                'db_table': 'competitive_rank',
            },
        ),
        migrations.CreateModel(
            name='LeaderboardRank',
            fields=[
                ('player', models.OneToOneField(db_column='account_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='leaderboard_rank', serialize=False, to='players.player')),
                ('rating', models.PositiveIntegerField(blank=True, help_text="The player's position on the leaderboard.", null=True)),
            ],
            options={
                'verbose_name': 'Leaderboard Rank',
                'verbose_name_plural': 'Leaderboard Ranks',
                'db_table': 'leaderboard_rank',
            },
        ),
        migrations.CreateModel(
            name='NotablePlayer',
            fields=[
                ('player', models.OneToOneField(db_column='account_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='notable_profile', serialize=False, to='players.player')),
                ('name', models.CharField(blank=True, help_text="The player's professional name/handle.", max_length=255, null=True)),
                ('country_code', models.CharField(blank=True, max_length=2, null=True)),
                ('fantasy_role', models.SmallIntegerField(blank=True, null=True)),
                ('is_locked', models.BooleanField(default=False, help_text="Indicates if the player's team is locked for a tournament.")),
                ('is_pro', models.BooleanField(db_index=True, default=False)),
                ('locked_until', models.DateTimeField(blank=True, null=True)),
                ('is_current_team_member', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'verbose_name': 'Notable Player',
                'verbose_name_plural': 'Notable Players',
                'db_table': 'notable_players',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RankTier',
            fields=[
                ('player', models.OneToOneField(db_column='account_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='rank_tier', serialize=False, to='players.player')),
                ('rating', models.PositiveIntegerField(blank=True, db_index=True, help_text='The integer representation of the rank tier (e.g., 75 for Divine 5).', null=True)),
            ],
            options={
                'verbose_name': 'Rank Tier',
                'verbose_name_plural': 'Rank Tiers',
                'db_table': 'rank_tier',
            },
        ),
        migrations.CreateModel(
            name='SoloCompetitiveRank',
            fields=[
                ('player', models.OneToOneField(db_column='account_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='solo_rank', serialize=False, to='players.player')),
                ('rating', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Solo Competitive Rank',
                'verbose_name_plural': 'Solo Competitive Ranks',
                'db_table': 'solo_competitive_rank',
            },
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['personaname'], name='player_name_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['loccountrycode'], name='player_country_idx'),
        ),
        migrations.AddField(
            model_name='playermatchhistory',
            name='player',
            field=models.ForeignKey(db_column='account_id', on_delete=django.db.models.deletion.CASCADE, related_name='match_history_entries', to='players.player'),
        ),
        migrations.AddField(
            model_name='playerrating',
            name='player',
            field=models.ForeignKey(db_column='account_id', on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='players.player'),
        ),
        migrations.AddField(
            model_name='notableplayer',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notable_players', to='teams.team'),
        ),
        migrations.AddIndex(
            model_name='playermatchhistory',
            index=models.Index(fields=['match_id'], name='pmh_match_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='playermatchhistory',
            unique_together={('match_id', 'player')},
        ),
        migrations.AddIndex(
            model_name='playerrating',
            index=models.Index(fields=['match_id'], name='pr_match_idx'),
        ),
        migrations.AddIndex(
            model_name='playerrating',
            index=models.Index(fields=['solo_competitive_rank'], name='pr_solo_idx'),
        ),
        migrations.AddIndex(
            model_name='playerrating',
            index=models.Index(fields=['competitive_rank'], name='pr_party_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='playerrating',
            unique_together={('player', 'time')},
        ),
        migrations.AddIndex(
            model_name='notableplayer',
            index=models.Index(fields=['is_pro', 'is_locked'], name='player_pro_idx'),
        ),
        migrations.AddIndex(
            model_name='notableplayer',
            index=models.Index(fields=['fantasy_role'], name='player_role_idx'),
        ),
        migrations.AddConstraint(
            model_name='notableplayer',
            constraint=models.CheckConstraint(condition=models.Q(('fantasy_role__gte', 0), ('fantasy_role__isnull', True), _connector='OR'), name='fantasy_role_non_negative'),
        ),
    ]
